-- Tabela FORNECEDOR
CREATE TABLE FORNECEDOR (
  COD_FORNECEDOR SERIAL PRIMARY KEY,
  NOME_FOR VARCHAR(100) NOT NULL,
  CONTATO VARCHAR(100) NOT NULL,
  CEP CHAR(8) NOT NULL
);

-- Tabela CATEGORIA
CREATE TABLE CATEGORIA (
  COD_CATEGORIA SERIAL PRIMARY KEY,
  NOME_CAT VARCHAR(50)
);

-- Tabela PRODUTO
CREATE TABLE PRODUTO (
  COD_PRODUTO SERIAL PRIMARY KEY,
  NOME_PROD VARCHAR(50),
  COD_CATEGORIA INT,
  VALOR_UNITARIO REAL,
  QUANT_ESTOQUE INT,
  STATUS CHAR(1),
  FOREIGN KEY (COD_CATEGORIA) REFERENCES CATEGORIA(COD_CATEGORIA)
);

-- Tabela INGREDIENTE
CREATE TABLE INGREDIENTE (
  COD_INGREDIENTE SERIAL PRIMARY KEY,
  NOME_ING VARCHAR(50),
  COD_PRODUTO INT,
  QUANTIDADE_NECESSARIA INT,
  FOREIGN KEY (COD_PRODUTO) REFERENCES PRODUTO(COD_PRODUTO)
);

-- Tabela MESA
CREATE TABLE MESA (
  COD_MESA INT PRIMARY KEY,
  CAPACIDADE INT
);

-- Tabela ATENDENTE
CREATE TABLE ATENDENTE (
  COD_ATENDENTE SERIAL PRIMARY KEY,
  NOME_ATEND VARCHAR(50)
);

-- Tabela COMPRA
CREATE TABLE COMPRA (
  COD_COMPRA SERIAL PRIMARY KEY,
  COD_PRODUTO INT NOT NULL,
  QUANTIDADE_COMPRADA INT NOT NULL,
  VALOR_TOTAL_COMPRADO INT NOT NULL,
  DATA_COMPRA TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY (COD_PRODUTO) REFERENCES PRODUTO (COD_PRODUTO)
);

-- Tabela COTACAO_ATUAL
CREATE TABLE COTACAO_ATUAL (
  COD_PRODUTO INT NOT NULL,
  COD_FORNECEDOR INT NOT NULL,
  PRECO_PRODUTO REAL NOT NULL,
  PRIMARY KEY (COD_PRODUTO, COD_FORNECEDOR),
  FOREIGN KEY (COD_PRODUTO) REFERENCES PRODUTO (COD_PRODUTO),
  FOREIGN KEY (COD_FORNECEDOR) REFERENCES FORNECEDOR (COD_FORNECEDOR)
);

-- Tabela PEDIDO
CREATE TABLE PEDIDO (
  COD_PEDIDO SERIAL PRIMARY KEY,
  COD_MESA INT,
  COD_ATENDENTE INT,
  DATA_PEDIDO TIMESTAMP DEFAULT NOW(),
  VALOR_TOTAL_PEDIDO REAL,
  QUANT_ITENS_PEDIDOS INT,
  STATUS CHAR(1),
  FOREIGN KEY (COD_MESA) REFERENCES MESA(COD_MESA),
  FOREIGN KEY (COD_ATENDENTE) REFERENCES ATENDENTE(COD_ATENDENTE)
);

-- Tabela PRODUTO_PEDIDO
CREATE TABLE PRODUTO_PEDIDO (
  COD_PEDIDO INT,
  COD_PRODUTO INT,
  QUANTIDADE_ITEMP INT,
  VALOR_TOTAL_ITEMP REAL,
  CONSTRAINT PK_PRODUTO_PEDIDO PRIMARY KEY(COD_PEDIDO, COD_PRODUTO),
  FOREIGN KEY (COD_PEDIDO) REFERENCES PEDIDO(COD_PEDIDO),
  FOREIGN KEY (COD_PRODUTO) REFERENCES PRODUTO(COD_PRODUTO)
);

-- Tabela PRODUTO_COMPRA
CREATE TABLE PRODUTO_COMPRA (
  COD_COMPRA INT,
  COD_PRODUTO INT,
  COD_FORNECEDOR INT,
  QUANTIDADE_ITEMC INT,
  VALOR_TOTAL_ITEMC REAL,
  CONSTRAINT PK_PRODUTO_COMPRA PRIMARY KEY(COD_COMPRA, COD_PRODUTO),
  FOREIGN KEY (COD_COMPRA) REFERENCES COMPRA(COD_COMPRA),
  FOREIGN KEY (COD_PRODUTO) REFERENCES PRODUTO(COD_PRODUTO),
  FOREIGN KEY (COD_FORNECEDOR) REFERENCES FORNECEDOR (COD_FORNECEDOR)
);

-- Inserir dados na tabela FORNECEDOR
INSERT INTO FORNECEDOR (NOME_FOR, CONTATO, CEP) VALUES ('Fornecedor 1', 'Contato 1', '12345678');
INSERT INTO FORNECEDOR (NOME_FOR, CONTATO, CEP) VALUES ('Fornecedor 2', 'Contato 2', '87654321');

-- Inserir dados na tabela CATEGORIA
INSERT INTO CATEGORIA (NOME_CAT) VALUES ('Categoria 1');
INSERT INTO CATEGORIA (NOME_CAT) VALUES ('Categoria 2');

-- Inserir dados na tabela PRODUTO
INSERT INTO PRODUTO (NOME_PROD, COD_CATEGORIA, VALOR_UNITARIO, QUANT_ESTOQUE, STATUS) VALUES ('Produto 1', 1, 10.99, 100, 'A');
INSERT INTO PRODUTO (NOME_PROD, COD_CATEGORIA, VALOR_UNITARIO, QUANT_ESTOQUE, STATUS) VALUES ('Produto 2', 2, 5.99, 50, 'A');

-- Inserir dados na tabela INGREDIENTE
INSERT INTO INGREDIENTE (NOME_ING, COD_PRODUTO, QUANTIDADE_NECESSARIA) VALUES ('Ingrediente 1', 1, 2);
INSERT INTO INGREDIENTE (NOME_ING, COD_PRODUTO, QUANTIDADE_NECESSARIA) VALUES ('Ingrediente 2', 2, 3);

-- Inserir dados na tabela MESA
INSERT INTO MESA (COD_MESA, CAPACIDADE) VALUES (1, 4);
INSERT INTO MESA (COD_MESA, CAPACIDADE) VALUES (2, 6);

-- Inserir dados na tabela ATENDENTE
INSERT INTO ATENDENTE (NOME_ATEND) VALUES ('Atendente 1');
INSERT INTO ATENDENTE (NOME_ATEND) VALUES ('Atendente 2');

-- Inserir dados na tabela COTACAO_ATUAL
INSERT INTO COTACAO_ATUAL (COD_PRODUTO, COD_FORNECEDOR, PRECO_PRODUTO) VALUES (1, 2, 8.99);
INSERT INTO COTACAO_ATUAL (COD_PRODUTO, COD_FORNECEDOR, PRECO_PRODUTO) VALUES (1, 1, 9.99);
INSERT INTO COTACAO_ATUAL (COD_PRODUTO, COD_FORNECEDOR, PRECO_PRODUTO) VALUES (2, 2, 4.99);


CREATE OR REPLACE FUNCTION realizar_pedido(
  COD_P INT,
  NOME_PRODUTO VARCHAR(50),
  COD_MESA INT,
  COD_ATENDENTE INT,
  QUANTIDADE INT
) 
RETURNS VOID 
AS $$
DECLARE
  COD_PROD INT;
  VALOR_UNIT REAL;
  QUANT_EST INT;
BEGIN
  -- Obter o código do produto e suas informações
  SELECT COD_PRODUTO, VALOR_UNITARIO, QUANT_ESTOQUE
  INTO COD_PROD, VALOR_UNIT, QUANT_EST
  FROM PRODUTO
  WHERE NOME_PROD = NOME_PRODUTO;

  -- Verificar se há quantidade suficiente em estoque
  IF QUANT_EST >= QUANTIDADE THEN
    -- Inserir pedido na tabela PEDIDO
    IF NOT EXISTS (SELECT * FROM PEDIDO WHERE COD_PEDIDO = COD_P) THEN
      INSERT INTO PEDIDO (COD_PEDIDO, COD_MESA, COD_ATENDENTE, VALOR_TOTAL_PEDIDO, QUANT_ITENS_PEDIDOS, STATUS)
      VALUES (COD_P, COD_MESA, COD_ATENDENTE, VALOR_UNIT * QUANTIDADE, QUANTIDADE, 'A');
    ELSE
      UPDATE PEDIDO
      SET VALOR_TOTAL_PEDIDO = VALOR_TOTAL_PEDIDO + (VALOR_UNIT * QUANTIDADE),
          QUANT_ITENS_PEDIDOS = QUANT_ITENS_PEDIDOS + QUANTIDADE
      WHERE COD_PEDIDO = COD_P;
    END IF;

    -- Inserir produto_pedido na tabela PRODUTO_PEDIDO
	IF NOT EXISTS (SELECT * FROM PRODUTO_PEDIDO WHERE COD_PEDIDO = COD_P AND COD_PRODUTO = COD_PROD) THEN
      INSERT INTO PRODUTO_PEDIDO (COD_PEDIDO, COD_PRODUTO, QUANTIDADE_ITEMP, VALOR_TOTAL_ITEMP)
      VALUES (COD_P, COD_PROD, QUANTIDADE, VALOR_UNIT * QUANTIDADE);
    ELSE
      UPDATE PRODUTO_PEDIDO
      SET  VALOR_TOTAL_ITEMP =  VALOR_TOTAL_ITEMP + (VALOR_UNIT * QUANTIDADE),
          QUANTIDADE_ITEMP = QUANTIDADE_ITEMP + QUANTIDADE
      WHERE COD_PEDIDO = COD_P;
    END IF;
	
    -- Atualizar quantidade em estoque
    UPDATE PRODUTO SET QUANT_ESTOQUE = QUANT_ESTOQUE - QUANTIDADE WHERE COD_PRODUTO = COD_PROD;

  ELSE
    RAISE EXCEPTION 'NÃO HÁ QUANTIDADE SUFICIENTE EM ESTOQUE';
  END IF;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION realizar_compra(
  COD_COMP INT,
  COD_PROD INT,
  COD_FORN INT,
  QUANTIDADE INT
) 
RETURNS VOID 
AS $$
DECLARE
  VALOR_UNIT REAL; 
BEGIN
  -- Verificar se existe uma cotação atual para o produto e fornecedor específico
  IF EXISTS (SELECT * FROM COTACAO_ATUAL WHERE COD_PRODUTO = COD_PROD AND COD_FORNECEDOR = COD_FORN) THEN
    -- Obter o valor unitário do produto
    SELECT PRECO_PRODUTO INTO VALOR_UNIT
    FROM COTACAO_ATUAL
    WHERE COD_PRODUTO = COD_PROD AND COD_FORNECEDOR = COD_FORN;

    -- Verificar se a compra já existe na tabela COMPRA
    IF NOT EXISTS (SELECT * FROM COMPRA WHERE COD_COMPRA = COD_COMP) THEN
      -- Inserir a compra na tabela COMPRA
      INSERT INTO COMPRA (COD_COMPRA, COD_PRODUTO, QUANTIDADE_COMPRADA, VALOR_TOTAL_COMPRADO, DATA_COMPRA)
      VALUES (COD_COMP, COD_PROD, QUANTIDADE, VALOR_UNIT * QUANTIDADE, CURRENT_DATE);
    ELSE
      -- Atualizar a quantidade comprada e o valor total da compra na tabela COMPRA
      UPDATE COMPRA
      SET QUANTIDADE_COMPRADA = QUANTIDADE_COMPRADA + QUANTIDADE,
          VALOR_TOTAL_COMPRADO = VALOR_TOTAL_COMPRADO + (VALOR_UNIT * QUANTIDADE),
          DATA_COMPRA = CURRENT_DATE
      WHERE COD_COMPRA = COD_COMP;
    END IF;

    -- Verificar se é o primeiro produto da compra na tabela PRODUTO_COMPRA
    IF NOT EXISTS (SELECT * FROM PRODUTO_COMPRA WHERE COD_COMPRA = COD_COMP AND COD_PRODUTO = COD_PROD) THEN
      -- Inserir o produto da compra na tabela PRODUTO_COMPRA
      INSERT INTO PRODUTO_COMPRA (COD_COMPRA, COD_PRODUTO, COD_FORNECEDOR, QUANTIDADE_ITEMC, VALOR_TOTAL_ITEMC)
      VALUES (COD_COMP, COD_PROD, COD_FORN, QUANTIDADE, VALOR_UNIT * QUANTIDADE);
    ELSE
      -- Atualizar a quantidade do produto na tabela PRODUTO_COMPRA
      UPDATE PRODUTO_COMPRA
      SET QUANTIDADE_ITEMC = QUANTIDADE_ITEMC + QUANTIDADE,
          VALOR_TOTAL_ITEMC = VALOR_TOTAL_ITEMC + (VALOR_UNIT * QUANTIDADE)
      WHERE COD_COMPRA = COD_COMP AND COD_PRODUTO = COD_PROD;
    END IF;

    -- Atualizar a quantidade em estoque na tabela PRODUTO
    UPDATE PRODUTO
    SET QUANT_ESTOQUE = QUANT_ESTOQUE + QUANTIDADE
    WHERE COD_PRODUTO = COD_PROD;

  ELSE
    RAISE EXCEPTION 'NÃO EXISTE COTAÇÃO DE PREÇO PARA O PRODUTO E FORNECEDOR ESPECIFICADOS';
  END IF;
END;
$$ LANGUAGE plpgsql;

SELECT realizar_compra(1, 2, 2, 1);

SELECT * FROM COMPRA;
SELECT * FROM PRODUTO_COMPRA;

CREATE OR REPLACE FUNCTION consultar_compras_por_fornecedor(COD_FORN INT)
RETURNS TABLE (
  COD_COMPRA INT,
  NOME_PRODUTO VARCHAR(50),
  QUANTIDADE INT,
  DATA_COMPRA DATE,
  VALOR_TOTAL NUMERIC
) 
AS $$
SELECT C.COD_COMPRA, P.NOME_PROD, PC.QUANTIDADE_ITEMC, C.DATA_COMPRA, PC.VALOR_TOTAL_ITEMC
FROM COMPRA C
JOIN PRODUTO_COMPRA PC ON C.COD_COMPRA = PC.COD_COMPRA
JOIN PRODUTO P ON P.COD_PRODUTO = PC.COD_PRODUTO
WHERE PC.COD_FORNECEDOR = COD_FORN;
$$ LANGUAGE SQL;

SELECT consultar_compras_por_fornecedor(2);


CREATE OR REPLACE FUNCTION listar_compras_por_produto(p_cod_produto INT)
RETURNS TABLE (
  cod_compra INT,
  quantidade_comprada INT,
  data_compra TIMESTAMP
)
AS $$
BEGIN
  RETURN QUERY
  SELECT c.cod_compra, c.quantidade_comprada, c.data_compra
  FROM compra c
  WHERE c.cod_produto = p_cod_produto;

  RETURN;
END;
$$
LANGUAGE plpgsql;


SELECT listar_compras_por_produto(1);


